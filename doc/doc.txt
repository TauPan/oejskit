jskit
=======

jskit contains infrastructure and in particular a py.test (XXX link) plugin to
enable running tests for JavaScript code inside browsers directly
using py.test as the test driver. Running inside the browsers comes
with some speed cost, on the other hand it means for example the code
is tested against the real-word DOM implementations. 

The approach also enables to write integration tests such that the
JavaScript code is tested against server-side Python code mocked as
necessary. Any server-side framework that can already be exposed
through WSGI (or for which a subset of WSGI can be written to
accommodate the jskit own needs XXX pointer ) can play along.

jskit also contains contain code to help modularizing JavaScript code
which can be used to describe and track dependencies dynamically
during development and that can help resolving them statically when
deploying/packaging.

jskit depends on simplejson. It also uses MochiKit (xxx ref) - of
which it ships a version within itself for convenience - for its own
working though in does not imposes its usage on tested code.


XXX history

Basics of writing and running tests
------------------------------------

For the simplest cases jskit allows to write tests simply as just
JavaScript files. As an example one could have a jstest_example_any.js
in a test directory in a project::

    Tests = {

    test_simple: function() {
        ais(21*2, 42)
    }

    }

``jstest_*.js`` is the globbing pattern used by jskit to recognize
JavaScript test files. Each of these need to contain a ``Tests``
object with test methods starting with ``test_``. ``ais`` is one of
the assertion functions predefined by jskit, it raises an exception
causing the test to fail if the two arguments are not equal (in
JavaScript ``=`` sense).

The suffix ``any`` separated by an underscore (``_``) in the test file name controls the kind of browsers the test should be run against, ``any`` is predefined by jskit to be

- Firefox and Safari on Mac OS X
- Internet Explorer and Firefox on Windows
- Firefox (started as ``firefox``) otherwise (e.g. Linux)

later we'll see how to define other groups of browsers.

To run the test we need to use py.test with the jskit plugin
activated, a ``conftest.py`` file at the top of the project with::

    pytest_plugins = ["jstests"]

should work. (XXX pointer to plugin usage docs)

Running the test is just a matter of invoking ``py.test`` that has an installed jskit available on the Python path::

    $ ../v/bin/py.test test/
    inserting into sys.path: /u/pedronis/scratch/oejskit-play/v/lib/python2.5/site-packages
    ========================================= test session starts =========================================
    python: platform linux2 -- Python 2.5.2
    test object 1: /u/pedronis/scratch/oejskit-play/proj/test

    test/jstest_example_any.js .

    ====================================== 1 passed in 2.52 seconds =======================================

(concretely here I'm using a `virtualenv` with both the `py.lib` and the ``oejskit`` egg installed in it)

Tests from different ``Tests`` objects are run isolated in IFRAMEs
which will also display test results enumerating both assertions and
tests, not just tests. Each JavaScript ``test_`` method is run and its
result reported by py.test as it would for Python tests. ``test_``
methods from a ``Tests`` object are run in alphabetical order.


Finding JavaScript
-------------------

Tests of course need to be able to load and refer to tested
code. Let's assume for example that JavaScript code lives under the
``static/js`` directory in the project, for example there could be a
file ``ex.js`` there::

    function ok() {
        return "ok"
    }

jskit way to refer to tested code is based on its modularity
functionality, though for the simplest cases this is involve just
providing enough information such that parts of the URL space can be
mapped back to parts of the filesystem where JavaScript lives. 

Adding the following to the ``conftest.py`` of the project::

    class jstests_setup:
        staticDirs = {
           '/static': os.path.join(os.path.dirname(__file__), 'static')
        }
        jsRepos = ['/static']

tells jskit to serve files from the ``static`` directory (the value in
the ``staticDirs`` mapping) for the ``static`` subtree of the URL space
(the key).

The values in ``jsRepos`` list which prefixes of the URL space contain
JavaScript, they play a bigger role when using the full modularity
functionality, they are ncessary for the simple case too though.

With this configuration we can write a test ``jstest_ok_any.js`` for
the ``ok`` function in ``ex.js`` that looks like this::

    OpenEnd.require("/static/js/ex.js")

    Tests = {
    test_ok: function() {
       var res = ok()
       ais(res, "ok")
    }
    }

With the information provided jskit can infer that ``ex.js`` is needed for the test and serve it.

Running all the tests now should give::

    $ ../v/bin/py.test
    inserting into sys.path: /u/pedronis/scratch/oejskit-play/v/lib/python2.5/site-packages
    ========================================= test session starts =========================================
    python: platform linux2 -- Python 2.5.2
    test object 1: /u/pedronis/scratch/oejskit-play/proj

    test/jstest_example_any.js .
    test/jstest_ok_any.js .

    ====================================== 2 passed in 5.06 seconds =======================================


Test failures
--------------

